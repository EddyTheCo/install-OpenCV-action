name: build-OpenCV
inputs:
  os:
    default: 'ubuntu-latest' 
  version:
    default: '4.8.0'
  build_wasm:
    default: false
  Install-Dir:
    default:  ${{ runner.temp }}/OpenCV
  build_android:
    default: 'none'

runs:
  using: "composite"
  steps:

    - uses: actions/checkout@v3
      with:
        repository: opencv/opencv
        ref: ${{ inputs.version }}
        path: 'OpenCV'

    - name: Install dependencies on windows
      if: startsWith(inputs.os, 'windows')
      shell: 'pwsh' 
      run: |
        choco install ninja cmake
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Install dependencies on ubuntu
      if: startsWith(inputs.os, 'ubuntu')
      shell: 'bash' 
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build cmake 

    - name: Install dependencies on macos
      if: startsWith(inputs.os, 'macos')
      shell: 'bash' 
      run: |
        brew install cmake ninja

    - name: Configure NDK
      if: ${{ !startsWith(inputs.build_android,'none') }}
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: false

    - uses: mymindstorm/setup-emsdk@v11
      if: startsWith(inputs.build_wasm,'true')
      with:
        version: 3.1.25
        actions-cache-folder: 'emsdk-cache'

    - name: Create build directory-Linux
      if: ${{ !startsWith(inputs.os, 'windows') }}
      run:  cmake -E make_directory ${{runner.temp}}/OpenCVbuild
      shell: 'bash'
    
    - name: Create build directory-Windows
      if: startsWith(inputs.os, 'windows') 
      run:  cmake -E make_directory ${{runner.temp}}/OpenCVbuild
      shell: 'pwsh'

    - name: Configure-Desktop-Linux
      if: ${{ startsWith(inputs.build_wasm, 'false') && startsWith(inputs.build_android,'none') && !startsWith(inputs.os,'windows') }}
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake -G Ninja -DCMAKE_BUILD_TYPE="release"  -DCMAKE_INSTALL_PREFIX=${{ inputs.Install-Dir }}  ${{ github.workspace }}/OpenCV
      shell: 'bash'
    
    - name: Configure-Desktop-Windows
      if: startsWith(inputs.os, 'windows') 
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake -G Ninja -DCMAKE_BUILD_TYPE="release"  -DCMAKE_INSTALL_PREFIX=${{ inputs.Install-Dir }}  ${{ github.workspace }}/OpenCV
      shell: 'pwsh'
    
    - name: Configure-Android
      if: ${{ !startsWith(inputs.build_android,'none') }}
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake -G Ninja -DCMAKE_BUILD_TYPE="release" -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ inputs.build_android }} -DCMAKE_INSTALL_PREFIX=${{ inputs.Install-Dir }}  ${{ github.workspace }}/OpenCV
      shell: 'bash'

    - name: Configure-Wasm
      if: startsWith(inputs.build_wasm, 'true')
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: emcmake cmake -G Ninja -DCMAKE_BUILD_TYPE="release" -DCMAKE_INSTALL_PREFIX=${{ inputs.Install-Dir }} -DBUILD_opencv_videoio=OFF -DBUILD_PERF_TESTS=OFF  -DBUILD_WASM_INTRIN_TESTS=OFF -DCV_ENABLE_INTRINSICS=OFF -DWITH_PTHREADS_PF=OFF -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PACKAGE=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_python3=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_js=ON -DBUILD_opencv_java=OFF -DBUILD_opencv_stitching=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_highgui=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_videoio=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_imgcodecs=OFF -DBUILD_opencv_photo=ON -DBUILD_opencv_ml=OFF -DBUILD_opencv_gapi=OFF -DBUILD_opencv_flann=ON -DBUILD_opencv_features2d=ON -DBUILD_opencv_dnn=ON -DBUILD_opencv_calib3d=ON -DBUILD_opencv_apps=OFF -DBUILD_ZLIB=ON -DWITH_QUIRC=ON -DWITH_ITT=OFF -DWITH_LAPACK=OFF -DWITH_LAPACK=OFF -DWITH_GPHOTO2=OFF -DWITH_OPENCLAMDBLAS=OFF -DWITH_OPENCLAMDFFT=OFF -DWITH_OPENCL_SVM=OFF -DWITH_OPENCL=OFF -DWITH_V4L=OFF -DWITH_TIFF=OFF -DWITH_TBB=OFF -DWITH_PNG=OFF -DWITH_OPENNI2=OFF -DWITH_OPENNI=OFF -DWITH_OPENVX=OFF -DWITH_OPENGL=OFF -DWITH_OPENEXR=OFF  -DWITH_WEBP=OFF -DWITH_JPEG=OFF -DWITH_JASPER=OFF -DWITH_IPP=OFF -DWITH_GTK_2_X=OFF -DWITH_GTK=OFF -DWITH_GSTREAMER=OFF -DWITH_FFMPEG=OFF -DWITH_EIGEN=OFF -DWITH_VTK=OFF -DWITH_ADE=OFF -DWITH_1394=OFF -DBUILD_SHARED_LIBS=OFF -DCV_TRACE=OFF -DCPU_DISPATCH='' -DCPU_BASELINE='' -DENABLE_PIC=FALSE  -DCMAKE_C_FLAGS='-s WASM=1 -s USE_PTHREADS=0' -DBUILD_OPENJPEG=OFF -DWITH_OPENJPEG=OFF  ${{ github.workspace }}/OpenCV
      shell: 'bash'

    - name: Build-Linux
      if: ${{ startsWith(inputs.build_wasm, 'false') && !startsWith(inputs.os,'windows') }}
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake --build .
      shell: 'bash'

    - name: Build-Windows
      if: startsWith(inputs.os,'windows') 
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake --build .
      shell: 'pwsh' 

    - name: Build-wasm
      if: startsWith(inputs.build_wasm, 'true')
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake --build . -t opencv.js
      shell: 'bash'


    - name: Install-Linux
      if: ${{ !startsWith(inputs.os,'windows') }}
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake --install .
      shell: 'bash'
    
    - name: Install-Windows
      if: startsWith(inputs.os,'windows')
      working-directory: ${{ runner.temp }}/OpenCVbuild
      run: cmake --install .
      shell: 'pwsh'


